package dclab.powerdatabackend.dao

import dclab.powerdatabackend.model.Logic
import org.apache.ibatis.annotations.*
import org.apache.ibatis.type.JdbcType
import org.springframework.stereotype.Repository

@Mapper
@Repository
interface LogicMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table logic
     *
     * @mbg.generated
     */
    @Delete("delete from logic", "where id = #{id,jdbcType=INTEGER}")
    fun deleteByPrimaryKey(id: Int?): Int

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table logic
     *
     * @mbg.generated
     */
    @Insert("insert into logic (id, conceptid, ", "description, type, ", "englishName, creator, ", "logic, createTime)", "values (#{id,jdbcType=INTEGER}, #{conceptid,jdbcType=INTEGER}, ", "#{description,jdbcType=VARCHAR}, #{type,jdbcType=VARCHAR}, ", "#{englishname,jdbcType=VARCHAR}, #{creator,jdbcType=VARCHAR}, ", "#{logic,jdbcType=VARCHAR}, #{createtime,jdbcType=VARCHAR})")
    fun insert(record: Logic): Int

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table logic
     *
     * @mbg.generated
     */
    @Select("select", "id, conceptid, description, type, englishName, creator, logic, createTime", "from logic", "where id = #{id,jdbcType=INTEGER}")
    @Results(Result(column = "id", property = "id", jdbcType = JdbcType.INTEGER, id = true), Result(column = "conceptid", property = "conceptid", jdbcType = JdbcType.INTEGER), Result(column = "description", property = "description", jdbcType = JdbcType.VARCHAR), Result(column = "type", property = "type", jdbcType = JdbcType.VARCHAR), Result(column = "englishName", property = "englishname", jdbcType = JdbcType.VARCHAR), Result(column = "creator", property = "creator", jdbcType = JdbcType.VARCHAR), Result(column = "logic", property = "logic", jdbcType = JdbcType.VARCHAR), Result(column = "createTime", property = "createtime", jdbcType = JdbcType.VARCHAR))
    fun selectByPrimaryKey(id: Int?): Logic

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table logic
     *
     * @mbg.generated
     */
    @Select("select", "id, conceptid, description, type, englishName, creator, logic, createTime", "from logic")
    @Results(Result(column = "id", property = "id", jdbcType = JdbcType.INTEGER, id = true), Result(column = "conceptid", property = "conceptid", jdbcType = JdbcType.INTEGER), Result(column = "description", property = "description", jdbcType = JdbcType.VARCHAR), Result(column = "type", property = "type", jdbcType = JdbcType.VARCHAR), Result(column = "englishName", property = "englishname", jdbcType = JdbcType.VARCHAR), Result(column = "creator", property = "creator", jdbcType = JdbcType.VARCHAR), Result(column = "logic", property = "logic", jdbcType = JdbcType.VARCHAR), Result(column = "createTime", property = "createtime", jdbcType = JdbcType.VARCHAR))
    fun selectAll(): List<Logic>

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table logic
     *
     * @mbg.generated
     */
    @Update("update logic", "set conceptid = #{conceptid,jdbcType=INTEGER},", "description = #{description,jdbcType=VARCHAR},", "type = #{type,jdbcType=VARCHAR},", "englishName = #{englishname,jdbcType=VARCHAR},", "creator = #{creator,jdbcType=VARCHAR},", "logic = #{logic,jdbcType=VARCHAR},", "createTime = #{createtime,jdbcType=VARCHAR}", "where id = #{id,jdbcType=INTEGER}")
    fun updateByPrimaryKey(record: Logic): Int
}