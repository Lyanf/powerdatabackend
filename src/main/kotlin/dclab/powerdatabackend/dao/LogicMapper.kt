package dclab.powerdatabackend.dao

import dclab.powerdatabackend.model.Logic
import org.apache.ibatis.annotations.Delete
import org.apache.ibatis.annotations.Insert
import org.apache.ibatis.annotations.Result
import org.apache.ibatis.annotations.Results
import org.apache.ibatis.annotations.Select
import org.apache.ibatis.annotations.Update
import org.apache.ibatis.type.JdbcType

interface LogicMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table logic
     *
     * @mbg.generated
     */
    @Delete("delete from logic", "where logic = #{logic,jdbcType=VARCHAR}")
    fun deleteByPrimaryKey(logic: String): Int

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table logic
     *
     * @mbg.generated
     */
    @Insert("insert into logic (logic, concept, ", "createTime, description, ", "type, englishName, ", "creator)", "values (#{logic,jdbcType=VARCHAR}, #{concept,jdbcType=VARCHAR}, ", "#{createtime,jdbcType=VARCHAR}, #{description,jdbcType=VARCHAR}, ", "#{type,jdbcType=VARCHAR}, #{englishname,jdbcType=VARCHAR}, ", "#{creator,jdbcType=VARCHAR})")
    fun insert(record: Logic): Int

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table logic
     *
     * @mbg.generated
     */
    @Select("select", "logic, concept, createTime, description, type, englishName, creator", "from logic", "where logic = #{logic,jdbcType=VARCHAR}")
    @Results(Result(column = "logic", property = "logic", jdbcType = JdbcType.VARCHAR, id = true), Result(column = "concept", property = "concept", jdbcType = JdbcType.VARCHAR), Result(column = "createTime", property = "createtime", jdbcType = JdbcType.VARCHAR), Result(column = "description", property = "description", jdbcType = JdbcType.VARCHAR), Result(column = "type", property = "type", jdbcType = JdbcType.VARCHAR), Result(column = "englishName", property = "englishname", jdbcType = JdbcType.VARCHAR), Result(column = "creator", property = "creator", jdbcType = JdbcType.VARCHAR))
    fun selectByPrimaryKey(logic: String): Logic

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table logic
     *
     * @mbg.generated
     */
    @Select("select", "logic, concept, createTime, description, type, englishName, creator", "from logic")
    @Results(Result(column = "logic", property = "logic", jdbcType = JdbcType.VARCHAR, id = true), Result(column = "concept", property = "concept", jdbcType = JdbcType.VARCHAR), Result(column = "createTime", property = "createtime", jdbcType = JdbcType.VARCHAR), Result(column = "description", property = "description", jdbcType = JdbcType.VARCHAR), Result(column = "type", property = "type", jdbcType = JdbcType.VARCHAR), Result(column = "englishName", property = "englishname", jdbcType = JdbcType.VARCHAR), Result(column = "creator", property = "creator", jdbcType = JdbcType.VARCHAR))
    fun selectAll(): List<Logic>

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table logic
     *
     * @mbg.generated
     */
    @Update("update logic", "set concept = #{concept,jdbcType=VARCHAR},", "createTime = #{createtime,jdbcType=VARCHAR},", "description = #{description,jdbcType=VARCHAR},", "type = #{type,jdbcType=VARCHAR},", "englishName = #{englishname,jdbcType=VARCHAR},", "creator = #{creator,jdbcType=VARCHAR}", "where logic = #{logic,jdbcType=VARCHAR}")
    fun updateByPrimaryKey(record: Logic): Int
}