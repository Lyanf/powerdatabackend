package dclab.powerdatabackend.dao

import dclab.powerdatabackend.model.Physics
import org.apache.ibatis.annotations.*
import org.apache.ibatis.type.JdbcType
import org.springframework.stereotype.Repository

@Mapper
@Repository
interface PhysicsMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table physics
     *
     * @mbg.generated
     */
    @Delete("delete from physics", "where id = #{id,jdbcType=INTEGER}")
    fun deleteByPrimaryKey(id: Int?): Int

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table physics
     *
     * @mbg.generated
     */
    @Insert("insert into physics (id, physics, ", "description, createTime, ", "englishName, type, ", "creator, logicid)", "values (#{id,jdbcType=INTEGER}, #{physics,jdbcType=VARCHAR}, ", "#{description,jdbcType=VARCHAR}, #{createtime,jdbcType=VARCHAR}, ", "#{englishname,jdbcType=VARCHAR}, #{type,jdbcType=VARCHAR}, ", "#{creator,jdbcType=VARCHAR}, #{logicid,jdbcType=INTEGER})")
    fun insert(record: Physics): Int

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table physics
     *
     * @mbg.generated
     */
    @Select("select", "id, physics, description, createTime, englishName, type, creator, logicid", "from physics", "where id = #{id,jdbcType=INTEGER}")
    @Results(Result(column = "id", property = "id", jdbcType = JdbcType.INTEGER, id = true), Result(column = "physics", property = "physics", jdbcType = JdbcType.VARCHAR), Result(column = "description", property = "description", jdbcType = JdbcType.VARCHAR), Result(column = "createTime", property = "createtime", jdbcType = JdbcType.VARCHAR), Result(column = "englishName", property = "englishname", jdbcType = JdbcType.VARCHAR), Result(column = "type", property = "type", jdbcType = JdbcType.VARCHAR), Result(column = "creator", property = "creator", jdbcType = JdbcType.VARCHAR), Result(column = "logicid", property = "logicid", jdbcType = JdbcType.INTEGER))
    fun selectByPrimaryKey(id: Int?): Physics

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table physics
     *
     * @mbg.generated
     */
    @Select("select", "id, physics, description, createTime, englishName, type, creator, logicid", "from physics")
    @Results(Result(column = "id", property = "id", jdbcType = JdbcType.INTEGER, id = true), Result(column = "physics", property = "physics", jdbcType = JdbcType.VARCHAR), Result(column = "description", property = "description", jdbcType = JdbcType.VARCHAR), Result(column = "createTime", property = "createtime", jdbcType = JdbcType.VARCHAR), Result(column = "englishName", property = "englishname", jdbcType = JdbcType.VARCHAR), Result(column = "type", property = "type", jdbcType = JdbcType.VARCHAR), Result(column = "creator", property = "creator", jdbcType = JdbcType.VARCHAR), Result(column = "logicid", property = "logicid", jdbcType = JdbcType.INTEGER))
    fun selectAll(): List<Physics>

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table physics
     *
     * @mbg.generated
     */
    @Update("update physics", "set physics = #{physics,jdbcType=VARCHAR},", "description = #{description,jdbcType=VARCHAR},", "createTime = #{createtime,jdbcType=VARCHAR},", "englishName = #{englishname,jdbcType=VARCHAR},", "type = #{type,jdbcType=VARCHAR},", "creator = #{creator,jdbcType=VARCHAR},", "logicid = #{logicid,jdbcType=INTEGER}", "where id = #{id,jdbcType=INTEGER}")
    fun updateByPrimaryKey(record: Physics): Int
}