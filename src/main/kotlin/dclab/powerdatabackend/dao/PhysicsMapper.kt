package dclab.powerdatabackend.dao

import dclab.powerdatabackend.model.Physics
import org.apache.ibatis.annotations.Delete
import org.apache.ibatis.annotations.Insert
import org.apache.ibatis.annotations.Param
import org.apache.ibatis.annotations.Result
import org.apache.ibatis.annotations.Results
import org.apache.ibatis.annotations.Select
import org.apache.ibatis.annotations.Update
import org.apache.ibatis.type.JdbcType

interface PhysicsMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table physics
     *
     * @mbg.generated
     */
    @Delete("delete from physics", "where physics = #{physics,jdbcType=VARCHAR}", "and type = #{type,jdbcType=VARCHAR}")
    fun deleteByPrimaryKey(@Param("physics") physics: String, @Param("type") type: String): Int

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table physics
     *
     * @mbg.generated
     */
    @Insert("insert into physics (physics, type, ", "description, createTime, ", "logic, englishName, ", "creator)", "values (#{physics,jdbcType=VARCHAR}, #{type,jdbcType=VARCHAR}, ", "#{description,jdbcType=VARCHAR}, #{createtime,jdbcType=VARCHAR}, ", "#{logic,jdbcType=VARCHAR}, #{englishname,jdbcType=VARCHAR}, ", "#{creator,jdbcType=VARCHAR})")
    fun insert(record: Physics): Int

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table physics
     *
     * @mbg.generated
     */
    @Select("select", "physics, type, description, createTime, logic, englishName, creator", "from physics", "where physics = #{physics,jdbcType=VARCHAR}", "and type = #{type,jdbcType=VARCHAR}")
    @Results(Result(column = "physics", property = "physics", jdbcType = JdbcType.VARCHAR, id = true), Result(column = "type", property = "type", jdbcType = JdbcType.VARCHAR, id = true), Result(column = "description", property = "description", jdbcType = JdbcType.VARCHAR), Result(column = "createTime", property = "createtime", jdbcType = JdbcType.VARCHAR), Result(column = "logic", property = "logic", jdbcType = JdbcType.VARCHAR), Result(column = "englishName", property = "englishname", jdbcType = JdbcType.VARCHAR), Result(column = "creator", property = "creator", jdbcType = JdbcType.VARCHAR))
    fun selectByPrimaryKey(@Param("physics") physics: String, @Param("type") type: String): Physics

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table physics
     *
     * @mbg.generated
     */
    @Select("select", "physics, type, description, createTime, logic, englishName, creator", "from physics")
    @Results(Result(column = "physics", property = "physics", jdbcType = JdbcType.VARCHAR, id = true), Result(column = "type", property = "type", jdbcType = JdbcType.VARCHAR, id = true), Result(column = "description", property = "description", jdbcType = JdbcType.VARCHAR), Result(column = "createTime", property = "createtime", jdbcType = JdbcType.VARCHAR), Result(column = "logic", property = "logic", jdbcType = JdbcType.VARCHAR), Result(column = "englishName", property = "englishname", jdbcType = JdbcType.VARCHAR), Result(column = "creator", property = "creator", jdbcType = JdbcType.VARCHAR))
    fun selectAll(): List<Physics>

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table physics
     *
     * @mbg.generated
     */
    @Update("update physics", "set description = #{description,jdbcType=VARCHAR},", "createTime = #{createtime,jdbcType=VARCHAR},", "logic = #{logic,jdbcType=VARCHAR},", "englishName = #{englishname,jdbcType=VARCHAR},", "creator = #{creator,jdbcType=VARCHAR}", "where physics = #{physics,jdbcType=VARCHAR}", "and type = #{type,jdbcType=VARCHAR}")
    fun updateByPrimaryKey(record: Physics): Int
}