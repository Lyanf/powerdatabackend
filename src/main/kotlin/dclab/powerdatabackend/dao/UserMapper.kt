package dclab.powerdatabackend.dao

import dclab.powerdatabackend.model.User
import org.apache.ibatis.annotations.*
import org.apache.ibatis.type.JdbcType
import org.springframework.stereotype.Repository

@Mapper
@Repository
interface UserMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user
     *
     * @mbg.generated
     */
    @Delete("delete from user", "where username = #{username,jdbcType=VARCHAR}")
    fun deleteByPrimaryKey(username: String): Int

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user
     *
     * @mbg.generated
     */
    @Insert("insert into user (username, email, ", "phone, password, ", "authority)", "values (#{username,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR}, ", "#{phone,jdbcType=INTEGER}, #{password,jdbcType=VARCHAR}, ", "#{authority,jdbcType=INTEGER})")
    fun insert(record: User): Int

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user
     *
     * @mbg.generated
     */
    @Select("select", "username, email, phone, password, authority", "from user", "where username = #{username,jdbcType=VARCHAR}")
    @Results(Result(column = "username", property = "username", jdbcType = JdbcType.VARCHAR, id = true), Result(column = "email", property = "email", jdbcType = JdbcType.VARCHAR), Result(column = "phone", property = "phone", jdbcType = JdbcType.INTEGER), Result(column = "password", property = "password", jdbcType = JdbcType.VARCHAR), Result(column = "authority", property = "authority", jdbcType = JdbcType.INTEGER))
    fun selectByPrimaryKey(username: String): User

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user
     *
     * @mbg.generated
     */
    @Select("select", "username, email, phone, password, authority", "from user")
    @Results(Result(column = "username", property = "username", jdbcType = JdbcType.VARCHAR, id = true), Result(column = "email", property = "email", jdbcType = JdbcType.VARCHAR), Result(column = "phone", property = "phone", jdbcType = JdbcType.INTEGER), Result(column = "password", property = "password", jdbcType = JdbcType.VARCHAR), Result(column = "authority", property = "authority", jdbcType = JdbcType.INTEGER))
    fun selectAll(): List<User>

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user
     *
     * @mbg.generated
     */
    @Update("update user", "set email = #{email,jdbcType=VARCHAR},", "phone = #{phone,jdbcType=INTEGER},", "password = #{password,jdbcType=VARCHAR},", "authority = #{authority,jdbcType=INTEGER}", "where username = #{username,jdbcType=VARCHAR}")
    fun updateByPrimaryKey(record: User): Int
}